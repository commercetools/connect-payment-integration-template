import {
  ComponentOptions,
  PaymentComponent,
  PaymentComponentBuilder,
  PaymentMethod
} from '../../../payment-enabler/payment-enabler';
import buttonStyles from '../../../style/button.module.scss';
import inputFieldStyles from '../../../style/inputField.module.scss';
import styles from '../../../style/style.module.scss';
import {BaseComponent, BaseOptions} from '../../base';
import {addFormFieldsEventListeners, fieldIds, getInput, validateAllFields} from './utils';
import {PaymentOutcome, PaymentRequestSchemaDTO} from "../../../dtos/mock-payment.dto.ts";
import { randomUUID } from 'crypto';

export class PurchaseOrderBuilder implements PaymentComponentBuilder {
  public componentHasSubmit = true

  constructor(private baseOptions: BaseOptions) {}

  build(config: ComponentOptions): PaymentComponent {
    return new PurchaseOrder(this.baseOptions, config);
  }
}

export class PurchaseOrder extends BaseComponent {
  private showPayButton: boolean
  
  constructor(baseOptions: BaseOptions, componentOptions: ComponentOptions) {
    super(PaymentMethod.purchaseorder, baseOptions, componentOptions);
    this.showPayButton = componentOptions?.showPayButton ?? false;
  }

  mount(selector: string) {
    document.querySelector(selector).insertAdjacentHTML("afterbegin", this._getTemplate());
    if (this.showPayButton) {
      document.querySelector('#purchaseOrderForm-paymentButton').addEventListener('click', (e) => {
        e.preventDefault();
        this.submit();
      });
    }

    addFormFieldsEventListeners();
  }

  async submit() {
    // here we would call the SDK to submit the payment
    this.sdk.init({ environment: this.environment });
    const isFormValid = validateAllFields();
    if (!isFormValid) {
      return;
    }
    try {
      const resultCode = PaymentOutcome.AUTHORIZED;

      const uniqueness = randomUUID().toString();
      const request: PaymentRequestSchemaDTO = {
        paymentMethod: this.paymentMethod,
        paymentOutcome: resultCode,
        pspReference: `${uniqueness}+${getInput(fieldIds.poNumber).value}`
      }
      const response = await fetch(this.processorUrl + '/payments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'X-Session-Id': this.sessionId },
        body: JSON.stringify(request),
      });
      const data = await response.json();

      if (resultCode === PaymentOutcome.AUTHORIZED) {
        this.onComplete && this.onComplete({ isSuccess: true, paymentReference: data.paymentReference });
      } else {
        this.onComplete && this.onComplete({ isSuccess: false });
      }
    } catch(e) {
      this.onError('Some error occurred. Please try again.');
    }
  }

  private _getTemplate() {
    const payButton = this.showPayButton ? `<button class="${buttonStyles.button} ${buttonStyles.fullWidth} ${styles.submitButton}" id="purchaseOrderForm-paymentButton">Pay</button>` : '';
    return `
    <div class="${styles.wrapper}">
      <form class="${styles.paymentForm}">
        <div class="${inputFieldStyles.inputContainer}">Please enter a single authorized purchase order number generated by your organization. The PO number and payment instructions will appear on the invoice.</div>
        <div class="${inputFieldStyles.inputContainer}">
          <label class="${inputFieldStyles.inputLabel}" for="purchaseOrderForm-poNumber">
            PO Number <span aria-hidden="true"> *</span>
          </label>
          <input class="${inputFieldStyles.inputField}" type="text" id="purchaseOrderForm-poNumber" name="poNumber" value="">
          <span class="${styles.hidden} ${inputFieldStyles.errorField}">Invalid purchase order number</span>
        </div>
        
        ${payButton}
      </form>
      </div>
    `
  }

  showValidation() {
    validateAllFields();
  }

  isValid() {
    return validateAllFields();
  }

  isAvailable() {
    return Promise.resolve(true);
  }
}
